##CREATE A CHECKUP.sql file and call using @CHECKUP.sql
##Check if the database is primary or standby with a single file along with few more necessary information.
##Database open mode for RAC and NON-RAC
set lines 200 pages 200 
select INST_ID,name,open_mode,database_role,log_mode,switchover_status from gv$database
/
##Instance startup time
alter session set nls_date_format='dd-mm-yyyy hh24:mi:ss'
/
set lines 200 pages 200 
col host_name for a45 
SELECT host_name, instance_name. TO_CHAR (startup_time, 'DD-MM-YYYY HH24:MI:SS") startup_time, FLOOR(sysdate-startup_time) days FROM sys.v$instance
/
##Database sync status
col DESTINATION for A30 
select b.destination,a.dest_id,max(a.FIRST_TIME)"Date|.max(asequence#)"Applied" from
v$archived_log a, vSarchive_dest and a.dest_id-b.dest_id group by a.dest_id, b.destination order by a.dest_id
/
##Sync check for RAC and NON-RAC
select distinct(THREAD#),max(sequence#) "STANDBY" from gv$archived_log where APPLIED='YES' group by THREAD# order by select INST_ID,PROCESS,STATUS,THREAD#,sequence#,BLOCK# from gv$managed_standby
/
archive log list
/
show parameter background
/
sho parameter FAL
/
##For Standby datababse to check RFS and MRP process
select process,status,sequence#,block# from gv$managed standby
/
##For Standby to check last applied log sequence
alter session set nls_date format="dd-mm-yyyy hh24:mi:ss"
/
select 'Last Log applied : Logs, to_char(next_time, 'DD-MON-YY:HH24:MI:SS') Time from v$archived log where sequence#= (select max(sequence#) from v$archived_log where applied="YES') union select 'Last Log received : ' Logs, to_char(next_time,"DD-MON-YY:HH24:MI:SS") Time from v$archived log where sequence#= (select max(sequence#) from v$archived_log)
/
##Check ASM space
SELECT dg.name AS "DISK GROUP", d.name AS "NAME",
ROUND(d.total_mb / 1024, 2) AS "GB",ROUND(d.free_mb / 1024, 2) AS "AVAILABLE GB",ROUND((d.total_mb - d.free_mb) / d.total_mb * 100, 2) AS "USED%"
FROM v$asm_disk d JOIN v$asm_diskgroup dg ON (d.group_number = dg.group_number)ORDER BY dg.name, d.name
/
##File system utilization
!df -gt 
!df -h
##Tablespace utilization
set colsep |
set linesize 100 pages 100 trimspool on numwidth 14 
col name format a25
col owner format a15 
col "Used (GB)" format a15
col "Free (GB)" format a15 
col "(Used) %" format a15 
col "Size (M)" format a15 
SELECT d.status "Status", d.tablespace_name "Name", 
 TO_CHAR(NVL(a.bytes / 1024 / 1024 /1024, 0),'99,999,990.90') "Size (GB)", 
 TO_CHAR(NVL(a.bytes - NVL(f.bytes, 0), 0)/1024/1024 /1024,'99999999.99') "Used (GB)", 
 TO_CHAR(NVL(f.bytes / 1024 / 1024 /1024, 0),'99,999,990.90') "Free (GB)", 
 TO_CHAR(NVL((a.bytes - NVL(f.bytes, 0)) / a.bytes * 100, 0), '990.00') "(Used) %"
 FROM sys.dba_tablespaces d, 
 (select tablespace_name, sum(bytes) bytes from dba_data_files group by tablespace_name) a, 
 (select tablespace_name, sum(bytes) bytes from dba_free_space group by tablespace_name) f WHERE 
 d.tablespace_name = a.tablespace_name(+) AND d.tablespace_name = f.tablespace_name(+) AND NOT 
 (d.extent_management like 'LOCAL' AND d.contents like 'TEMPORARY') 
UNION ALL 
SELECT d.status 
 "Status", d.tablespace_name "Name", 
 TO_CHAR(NVL(a.bytes / 1024 / 1024 /1024, 0),'99,999,990.90') "Size (GB)", 
 TO_CHAR(NVL(t.bytes,0)/1024/1024 /1024,'99999999.99') "Used (GB)",
 TO_CHAR(NVL((a.bytes -NVL(t.bytes, 0)) / 1024 / 1024 /1024, 0),'99,999,990.90') "Free (GB)", 
 TO_CHAR(NVL(t.bytes / a.bytes * 100, 0), '990.00') "(Used) %" 
 FROM sys.dba_tablespaces d, 
 (select tablespace_name, sum(bytes) bytes from dba_temp_files group by tablespace_name) a, 
 (select tablespace_name, sum(bytes_cached) bytes from v$temp_extent_pool group by tablespace_name) t 
 WHERE d.tablespace_name = a.tablespace_name(+) AND d.tablespace_name = t.tablespace_name(+) AND d.extent_management like 'LOCAL' AND d.contents like 'TEMPORARY'
/
